/**
 * 
 */
package com.yhb.service.user.impl;

import com.yhb.base.BaseConstants;
import com.yhb.bean.entity.*;
import com.yhb.dao.*;
import com.yhb.service.common.SendSmsInfoService;
import com.yhb.service.user.AccountsUsersService;
import com.yhb.util.DateUtils;
import com.yhb.util.DesEncrypt;
import com.yhb.util.GenerateNo;
import com.yhb.util.StringUtil;
import com.yhb.util.cache.RedisCache;
import net.sf.json.JSONArray;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.text.ParseException;
import java.util.*;

/**
 * Copyright: Copyright (c) 2017 LanRu-Caifu
 * 
 * @ClassName: AccountsUsersServiceImpl.java
 * @Description: 用户实现类
 * @author:Krx
 * @date: 2017年4月27日 下午2:29:18
 */
@Service
@Transactional
public class AccountsUsersServiceImpl implements AccountsUsersService {
	private static Logger logger = LoggerFactory.getLogger(AccountsUsersServiceImpl.class);

	@Autowired
	AccountsUsersDao usersMapper;
	@Autowired
	RedisCache cache;
	@Autowired
	AgentDao agentDao;
	@Autowired
	BaseConfigDao baseConfigDao;
	@Autowired
	SignShareDao signShareDao;
	@Autowired
	ProfitTableDao profitTableDao;
	@Autowired
	AccountsUsersBalancesDao accountsUsersBalancesDao;
	@Autowired
	ActivityAdminSendDao activityAdminSendDao;
	@Autowired
	AccountUsersActivityDao accountUsersActivityDao;
	@Autowired
	AdminRaiseSendDao adminRaiseSendDao;
	@Autowired
	AccountRaiseGetDao accountRaiseGetDao;
	@Autowired
	ExperienceCPDao experienceCPDao;
	@Autowired
	ExperienceSendDao experienceSendDao;
	@Autowired
	SendSmsInfoService sendSmsInfoService;

	/**
	 * 
	 * @see AccountsUsersService#selectUserByUserName(java.lang.String)
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 根据username查询用户
	 *
	 * @param:userName
	 * @return：AccountsUsers
	 * @author: Krx
	 * @date: 2017年4月27日 下午2:29:33
	 */
	@Override
	public AccountsUsers selectUserByUserName(String userName) {
		AccountsUsers user_cache = usersMapper.selectUserByUserName(userName);
		return user_cache;
	}

	/**
	 * 
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 用户注册-Service
	 *
	 * @param: Map<String,
	 *             String> 手机号：account , 密码：password , 手机验证码：phoneCode ,
	 *             验证码：verif_code , 邀请人手机号码：inviteCode（可以为空）
	 * @return：AccountsUsers @throws：
	 *
	 * @version: v1.0.0
	 * @author: wangxf
	 * @date: 2017年5月4日 上午10:11:46
	 *
	 *        Modification History: Date Author Version Description
	 *        ---------------------------------------------------------*
	 *        2017年5月4日 wangxf v1.0.0 修改原因
	 */
	public AccountsUsers register(Map<String, String> registerMap) {
		logger.info("注册参数》》》" + registerMap);

		// 创建一个AccountUsers对象
		AccountsUsers accountsUsers = new AccountsUsers();
		// 邀请码
		String invitationCode = null;

		if (StringUtil.isNotBlank(registerMap.get("inviteCode"))) {
			invitationCode = registerMap.get("inviteCode");

			if (invitationCode.length() == 6) {
				Agent agent = agentDao.selectAgentByUserName(registerMap.get("inviteCode"));
				if (StringUtil.isNotNull(agent)) {
					accountsUsers.setPlatid(agent.getUserid()); // 代理商父级Id
				}
			} else {
				AccountsUsers parentusers = selectUserByUserName(registerMap.get("inviteCode"));
				if (StringUtil.isNotNull(parentusers)) {
					accountsUsers.setParentid(parentusers.getUserid()); // 经销商父级Id
				}
			}

		}

		accountsUsers.setUserid(GenerateNo.getUUID().toLowerCase());
		accountsUsers.setUsername(registerMap.get("account")); // UserName
		accountsUsers.setTelphone(registerMap.get("account")); // Telphone
		accountsUsers.setUserpassword(DesEncrypt.getMd5Password(registerMap.get("password"))); // Userpassword
		accountsUsers.setUserEk1(getUserSourceAddress(registerMap.get("type"))); // 来源
		accountsUsers.setUserEk2(invitationCode); // 邀请码
		accountsUsers.setUserEk3("1"); // 设置为老用户

		int count = insertSelectiveUsers(accountsUsers);

		if (count > 0) {
			return accountsUsers;
		}

		return null;

	}

	/**
	 * 
	 * @Description: 来源路径判断
	 *
	 * @param:type
	 * @return：来源
	 * @author: Krx
	 * @date: 2017年5月9日 上午10:13:13
	 */
	public String getUserSourceAddress(String type) {
		String source = "";
		switch (type) {
		case "1": // Pc
			source = BaseConstants.PC;
			break;
		case "2": // App
			source = BaseConstants.APP;
			break;
		case "3": // H5
			source = BaseConstants.H5;
			break;
		case "4": // 微信
			source = BaseConstants.WEIXIN;
			break;
		case "5": // 经销商
			source = BaseConstants.AGENT_ADDUSER;
			break;
		case "6": // 代理商
			source = BaseConstants.DISTRIBUTOR_ADDUSER;
			break;

		default:
			break;
		}
		return source;
	}

	/**
	 * @see AccountsUsersService#selectUserByPrimaryKey(java.lang.String)
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 根据UserId查询用户信息
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @author: Krx
	 * @date: 2017年5月8日 上午9:16:05
	 */
	@Override
	public AccountsUsers selectUserByPrimaryKey(String userId) {
		return this.usersMapper.selectByPrimaryKey(userId);
	}

	/**
	 * @see AccountsUsersService#selectByExample(com.yhb.bean.entity.AccountsUsersExample)
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 查询用户列表信息
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @author: Krx
	 * @date: 2017年5月8日 上午9:18:52
	 */
	@Override
	public List<AccountsUsers> selectByExample(AccountsUsersExample example) {
		return this.usersMapper.selectByExample(example);
	}

	/**
	 * @see AccountsUsersService#insertSelectiveUsers(com.yhb.bean.entity.AccountsUsers)
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 该函数的功能描述
	 *
	 * @param:描述1描述
	 * @return：返回结果描述
	 * @author: Krx
	 * @date: 2017年5月8日 上午10:51:14
	 */
	@Override
	public int insertSelectiveUsers(AccountsUsers users) {
		logger.info("添加数据>>>" + users);
		if (usersMapper.insertSelective(users) > 0) {
			// 添加静态字段
			ProfitTable profitTable = new ProfitTable();
			profitTable.setUserid(users.getUserid());
			profitTableDao.insertSelective(profitTable);

			// 添加余额字段
			AccountsUsersBalances balance = new AccountsUsersBalances();
			balance.setUserid(users.getUserid());
			balance.setModifytime(new Date());
			accountsUsersBalancesDao.insertSelective(balance);

			// 注册生成上下级分享
			signShare(users);
			// 注册添加新用户七天收益
			insertJedisRate(users.getUserid());
			// 如果为代理商名下注册
			if (users.getPlatid() != null && !BaseConstants.ParentIDCom.equals(users.getPlatid())) {
				belowAgent(users);// 代理商名下注册用户奖励
			}

			return 1;
		}
		return 0;
	}

	/**
	 * 
	 * @Description: 代理商名下奖励
	 *
	 * @param:user
	 * @return：boolean
	 * @author: krx
	 * @throws ParseException
	 * @date: 2017年5月8日 上午11:59:08
	 */
	private void belowAgent(AccountsUsers user) {
		Map<String, String> map = new HashMap<String, String>();

		if (user.getPlatid() != null && !user.getPlatid().equals(BaseConstants.ParentIDCom)) {
			// 查詢配置
			BaseConfig getRewardConfig = baseConfigDao.selectByParam("cfg_getRewardConfig");

			Agent agent = agentDao.selectAgentByUserId(user.getPlatid());

			if (agent != null && getRewardConfig.getValuese().equals("1")) {// 配置的开关1为开，0为关
				Integer order = getRewardConfig.getOrders();
				Integer Id = Integer.parseInt(getRewardConfig.getValue());
				if (order == 1) {
					// 查询红包
					ActivityAdminSend as = activityAdminSendDao.selectByPrimaryKey(Id);

					int day = DateUtils.daysBetween(as.getRedcreatetime(), as.getRedlasttime());
					Date overduTime = DateUtils.addDay(new Date(), day); // 过期时间

					AccountUsersActivity aua = new AccountUsersActivity(as.getProductid(), user.getUserid(),
							GenerateNo.payRecordNo(), String.valueOf(as.getId()), as.getRedname(), as.getRedmoney(),
							new Date(), overduTime, as.getRedrule());

					if (accountUsersActivityDao.insertSelective(aua) > 0) {
						as.setRedsendcount(as.getRedsendcount() + 1);
						if (activityAdminSendDao.updateByPrimaryKeySelective(as) > 0) {
							// 发送红包短信
							map.put("account", user.getUsername());
							map.put("smsContext",
									sendSmsInfoService.getSmsContextBySmsState(2, String.valueOf(as.getRedmoney())));
							sendSmsInfoService.sendSmsVerification(map);
						}
					}
				} else if (order == 2) {
					// 加息劵
					AdminRaiseSend ar = adminRaiseSendDao.selectByPrimaryKey(Id);

					int day = DateUtils.daysBetween(ar.getRaisecreatetime(), ar.getRaiseovertime());
					Date overduTime = DateUtils.addDay(new Date(), day);

					AccountRaiseGet arg = new AccountRaiseGet(user.getUserid(), ar.getRaisename(), ar.getProductid(),
							String.valueOf(ar.getId()), ar.getRaisemark(), ar.getRaisesize(), overduTime, new Date(),
							DateUtils.daysBetween(ar.getRaisecreatetime(), ar.getRaiseovertime()));

					if (accountRaiseGetDao.insertSelective(arg) > 0) {
						// 发加息劵短信
						map.put("account", user.getUsername());
						map.put("smsContext",
								sendSmsInfoService.getSmsContextBySmsState(3, String.valueOf(ar.getRaisesize() * 100)));
						sendSmsInfoService.sendSmsVerification(map);
					}
				} else if (order == 3) {
					// 体验金
					ExperienceCP ecp = experienceCPDao.selectByPrimaryKey(Id);
					int day;
					try {
						day = DateUtils.daysBetween(ecp.getExperiencecpaddtime(),
								DateUtils.convertStringToDate(DateUtils.dateTimePattern, ecp.getExperiencecpemK3()));
						Date overduTime = DateUtils.addDay(new Date(), day);

						ExperienceSend experienceSend = new ExperienceSend(ecp.getExperiencecpemK2(), user.getUserid(),
								Id, new Date(), 0, ecp.getExperiencecprate(), ecp.getExperiencecpcountmoeny(),
								ecp.getExperiencecpname(), DateUtils.parseToDateTimeStr(overduTime));

						if (experienceSendDao.insertSelective(experienceSend) > 0) {
							Integer i = Integer.parseInt(ecp.getExperiencecpemK1());
							Integer count = i + 1;
							ecp.setExperiencecpemK1(String.valueOf(count));
							if (experienceCPDao.updateByPrimaryKeySelective(ecp) > 0) {
								// 发体验金短信
								map.put("account", user.getUsername());
								map.put("smsContext", sendSmsInfoService.getSmsContextBySmsState(4,
										String.valueOf(ecp.getExperiencecpcountmoeny())));
								sendSmsInfoService.sendSmsVerification(map);
							}
						}
					} catch (ParseException e) {
						e.printStackTrace();
					}
				}
			}
		}
	}

	/**
	 * 注册生成signshare
	 * 
	 * @param
	 * @return
	 */
	private boolean signShare(AccountsUsers user) {
		String userId = user.getParentid() == null || BaseConstants.ParentIDCom.equals(user.getParentid())
				? user.getPlatid() : user.getParentid();

		if (userId != null && !"".equals(userId)) {
			BaseConfig baseConfig = baseConfigDao.selectByParam("cfg_agentreg");
			if (baseConfig.getValuese().equals("1")) {
				Agent agent = agentDao.selectAgentByUserId(userId);
				if (agent != null) {
					SignShare sign = new SignShare(userId, agent.getUsername(), new Date(), 2, user.getUserid(),
							user.getUsername(), "线下注册", "1");
					if (signShareDao.insertSelective(sign) > 0) {
						// 注册不加钱，注册并绑卡才加钱
						return true;
					} else {
						return false;
					}
				} else {
					AccountsUsers parentUser = usersMapper.selectByPrimaryKey(userId);
					if (parentUser != null) {
						SignShare sign = new SignShare(userId, parentUser.getUsername(), new Date(), 1,
								user.getUserid(), user.getUsername(), "线下注册", "1");
						if (signShareDao.insertSelective(sign) > 0) {
							return true;
						} else {
							return false;
						}
					}
				}
			}
		}
		return false;
	}

	/**
	 * 增加新手用户的redis缓存
	 * 
	 * @param userId
	 * @return
	 */
	public boolean insertJedisRate(String userId) {
		List<Map<String, Object>> list = new ArrayList<Map<String, Object>>();
		boolean result = false;
		for (int i = 6; i >= 0; i--) {
			String time = DateUtils.getLastDayFirst(-i);// 获取当前0
			Map<String, Object> maps = new HashMap<>();
			maps.put("time", time.substring(5, 10));
			maps.put("rates", String.valueOf(0.000));
			list.add(maps);
		}

		JSONArray array = JSONArray.fromObject(list);
		String jsonstr = array.toString();
		result = cache.putCache(
				RedisCache.user_cache + RedisCache.SEVENRATES + userId + RedisCache.SEVENRATES.replace(":", ""),
				jsonstr);

		return result;
	}

	/**
	 * @see AccountsUsersService#updateUserInfo(java.util.Map)
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 更新用户信息
	 *
	 * @param:registerMap
	 * @return：boolean
	 * @author: Krx
	 * @date: 2017年5月9日 上午10:51:23
	 */
	@Override
	public boolean updateUserInfo(Map<String, String> registerMap) {
		//手机号码
		String account = registerMap.get("account");
		
		AccountsUsers users  = selectUserByUserName(account);
		//当为1时，属于忘记密码
		if(registerMap.containsKey("password")){
			users.setUserpassword(DesEncrypt.getMd5Password(registerMap.get("passsword")));
			
		}
		
		int count  = usersMapper.updateByPrimaryKeySelective(users);
		
		
		return count > 0 ? true : false;
	}
	
	 /**
	  * 
	 * @Function: AccountsUsersServiceImpl.java
	 * @Description: 上传头像
	 *
	 * @param: AccountsUsers accountsUsers
	 * @return： boolean
	 * @throws： 
	 *
	 * @version: v1.0.0
	 * @author: wangxf
	 * @date: 2017年5月11日 下午3:20:29 
	 *
	 * Modification History:
	 * Date         Author          Version            Description
	 *---------------------------------------------------------*
	 * 2017年5月11日     wangxf           v1.0.0               修改原因
	  */
	 @Override
	 public boolean updateUserHanderImage(AccountsUsers accountsUsers){
		 
		 if( null == accountsUsers ){
			 return false;
		 }
		 int count = usersMapper.updateByPrimaryKeySelective(accountsUsers);
		
		 return count > 0 ? true : false;
	 }

	/**
	 *
	 * @Function: AccountsUsersService.java
	 * @Description: 判断身份证号码是否已经被注册
	 *
	 * @param: AccountsUsers accountsUsers
	 * @return： boolean
	 * @throws：
	 *
	 * @version: v1.0.0
	 * @author: wangxf
	 * @date: 2017年5月11日 下午3:20:29
	 *
	 * Modification History:
	 * Date         Author          Version            Description
	 *---------------------------------------------------------*
	 * 2017年5月11日     wangxf           v1.0.0               修改原因
	 */
	public boolean selectUserInfoByCardId(String cardId){

		boolean flag = false;
		if( StringUtil.isNotBlank(cardId) ){
			AccountsUsersExample example = new AccountsUsersExample();
			AccountsUsersExample.Criteria criteria = example.createCriteria();
			criteria.andCardidEqualTo(cardId);
			List<AccountsUsers> accountsUsersList = usersMapper.selectByExample(example);

			if( null != accountsUsersList && accountsUsersList.size() > 0 ){
				flag = true;
			}
		}

		return flag;
	}
}
